name: 'GitHub Vault Action'
description: 'Setup Vault Authentication for GitHub Actions'
inputs:
  secrets:
    description: 'Secrets to be fetched from Vault'
    required: false
  platform:
    description: 'Qumulus platform to be used'
    required: true
  region:
    description: 'AWS Region - either primary or secondary'
    required: false
    default: 'primary'
  export_token:
    description: 'Export vault Token to the environment'
    required: false
    default: 'true'
  vault_addr:
    description: 'Vault Address'
    required: true
  aws_account_data:
    description: 'AWS account data for different environments'
    required: false
runs:
  using: "composite"
  steps:
    - name: Set Variables
      shell: bash
      env:
        VAULT_ADDR: ${{ inputs.vault_addr }}
      run: |

        if [ ${{ github.event_name }} == "delete" ]; then
          BRANCH=${{ github.event.ref }}
          ENVIRONMENT=${{ github.event.ref }}
          VAULT_OIDC_BRANCH=${{ github.event.ref }}
        elif [ ${{ github.event_name }} == "schedule" ]; then
          BRANCH=${{ github.ref_name }}
          ENVIRONMENT=${{ github.ref_name }}
          VAULT_OIDC_BRANCH=${{ github.ref_name }}
        elif [ ${{ github.event_name }} == "pull_request_target" ]; then
          BRANCH=${{ github.head_ref }}
          ENVIRONMENT=${{ github.base_ref }}
          VAULT_OIDC_BRANCH=${{ github.base_ref }}
        elif [ ${{ github.event_name }} == "push" ]; then
          BRANCH=${{ github.ref_name }}
          ENVIRONMENT=${{ github.ref_name }}
          VAULT_OIDC_BRANCH=${{ github.ref_name }}
        elif [ ${{ github.event_name }} == "workflow_dispatch" ]; then
          BRANCH=${{ github.event.inputs.branch }}
          ENVIRONMENT=prod
          VAULT_OIDC_BRANCH=main
        else
          echo "Unsupported event: ${{ github.event_name }}"
          exit 1
        fi

        if [ "$ENVIRONMENT" == "main" ]; then
          ENVIRONMENT=prod
        elif [ "$ENVIRONMENT" != "staging" ] && [ "$ENVIRONMENT" != "qa" ] && [ "$ENVIRONMENT" != "experimental" ]; then
          ENVIRONMENT=dev
          VAULT_OIDC_BRANCH=dev
        fi

        REPOSITORY=$(echo ${GITHUB_REPOSITORY#*/})
        ROLE="github-qcp-${REPOSITORY}-${VAULT_OIDC_BRANCH}"

        if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
          ROLE="${ROLE}-pr"
        fi

        echo "ROLE=$ROLE" >> $GITHUB_ENV
        echo "VAULT_ADDR=$VAULT_ADDR" >> $GITHUB_ENV
        echo "BRANCH=$BRANCH" >> $GITHUB_ENV
        echo "REPOSITORY=$REPOSITORY" >> $GITHUB_ENV
        echo "VAULT_ADDR=${VAULT_ADDR}" >> $GITHUB_ENV
        echo "ENVIRONMENT=${ENVIRONMENT}" >> $GITHUB_ENV
        echo "VAULT_OIDC_BRANCH=${VAULT_OIDC_BRANCH}" >> $GITHUB_ENV

    - name: Import Secrets
      id: import-secrets
      uses: hashicorp/vault-action@v3
      with:
        exportToken: ${{ inputs.export_token }}
        method: jwt
        url: ${{ inputs.VAULT_ADDR }}
        path: jwt/github
        role: ${{ env.ROLE }}
        secrets: ${{ inputs.secrets }}

    - name: Set up AWS Profiles and Environment Variables
      shell: bash
      env:
        AWS_ACCOUNT_DATA_BASE64: ${{ inputs.aws_account_data }}
        PLATFORM: ${{ inputs.platform }}
        REGION: ${{ inputs.region }}
      run: |

        mkdir -p ~/.aws
        AWS_CREDENTIALS_PATH=~/.aws/config
        AWS_ACCOUNT_DATA=$(echo $AWS_ACCOUNT_DATA_BASE64 | base64 -d | jq ".${PLATFORM}.${ENVIRONMENT}")
        AWS_ACCOUNT_DATA_REGIONAL=$(echo $AWS_ACCOUNT_DATA_BASE64 | base64 -d | jq ".${PLATFORM}.${ENVIRONMENT}.${REGION}")

        for s in $(echo $AWS_ACCOUNT_DATA_REGIONAL | jq -r "to_entries|map(\"AWS_\(.key | ascii_upcase)=\(.value|tostring)\")|.[]" ); do
            echo "$s" >> $GITHUB_ENV
        done

        export AWS_ACCOUNT_ID=$(echo $AWS_ACCOUNT_DATA | jq -r '.account_id')
        export AWS_REGION=$(echo $AWS_ACCOUNT_DATA_REGIONAL | jq -r '.region')

        echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_ENV
        echo "AWS_REGION=$AWS_REGION" >> $GITHUB_ENV

        echo "AWS_DOMAIN_HOSTED_ZONE_ID=$(echo $AWS_ACCOUNT_DATA | jq -r '.hosted_zone_id')" >> $GITHUB_ENV
        echo "DOMAIN_NAME=$(echo $AWS_ACCOUNT_DATA | jq -r '.domain_name')" >> $GITHUB_ENV


        echo "[default]" > $AWS_CREDENTIALS_PATH
        echo "region = ${AWS_REGION}" >> $AWS_CREDENTIALS_PATH
        echo "credential_process=vault-aws-credential-helper ${AWS_REGION} github-${REPOSITORY}-${VAULT_OIDC_BRANCH} ${AWS_ACCOUNT_ID} vault/github/github-${REPOSITORY}-${VAULT_OIDC_BRANCH}" >>  $AWS_CREDENTIALS_PATH
        echo "" >> $AWS_CREDENTIALS_PATH

        for platform in $(echo $AWS_ACCOUNT_DATA_BASE64 | base64 -d | jq -r "to_entries | .[] | .key"); do
            for environment in $(echo $AWS_ACCOUNT_DATA_BASE64 | base64 -d | jq -r ".${platform} | to_entries | .[] | .key"); do

                account_id=$(echo $AWS_ACCOUNT_DATA_BASE64 | base64 -d | jq -r ".${platform}.${environment}.account_id")

                branch=${environment}

                if [ "$environment" == "prod" ]; then
                    branch="main"
                fi

                echo "[profile ${platform}_${environment}]" >> $AWS_CREDENTIALS_PATH
                echo "region = ${AWS_REGION}" >> $AWS_CREDENTIALS_PATH
                echo "credential_process=vault-aws-credential-helper ${AWS_REGION} github-${REPOSITORY}-${branch} ${account_id} vault/github/github-${REPOSITORY}-${branch}" >>  $AWS_CREDENTIALS_PATH
                echo "" >> $AWS_CREDENTIALS_PATH

            done
        done
